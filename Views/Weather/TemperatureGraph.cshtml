@model  IEnumerable<ReliDemo.Models.ITemperatureGraphItem>

<style>
#graph-legend table{
	margin:0 auto;
}
</style>
<div class="graphWrapper">
<div id="graph"  style="height:250px">
</div>
<div id="graph-legend" ></div>
<div class="forecastlabel">预报</div>
<div class="actuallabel">历史</div>
</div>
@Html.Hidden("forecastAverage", 
        "[" + string.Join(",", Model.Where(i=>i.ForcastAverage.HasValue).OrderBy(i=>i.日期).Select(i=> string.Format("{{\"time\": \"{0:yyyy-MM-dd HH:mm:ss}\", \"temperature\" : {1}, \"weathertype\" : {2} }}", i.日期, i.ForcastAverage,(int)i.WeatherType)).ToArray() ) + "]"
)
@Html.Hidden("forecastHighest",
                   "[" + string.Join(",", Model.Where(i => i.ForecastHighest.HasValue).Select(i => string.Format("{{\"time\": \"{0:yyyy-MM-dd HH:mm:ss}\", \"temperature\" : {1}}}", i.日期, i.ForecastHighest)).ToArray()) + "]"
)
@Html.Hidden("forecastLowest",
                           "[" + string.Join(",", Model.Where(i => i.ForecastLowest.HasValue).Select(i => string.Format("{{\"time\": \"{0:yyyy-MM-dd HH:mm:ss}\", \"temperature\" : {1}}}", i.日期, i.ForecastLowest)).ToArray()) + "]"
)
@Html.Hidden("actualAverage",
                               "[" + string.Join(",", Model.Where(i => i.ActualAverage.HasValue).Select(i => string.Format("{{\"time\": \"{0:yyyy-MM-dd HH:mm:ss}\", \"temperature\" : {1}}}", i.日期, i.ActualAverage)).ToArray()) + "]"
)

@Html.Hidden("maxTemp", Model.Max(i=>i.ForecastHighest))
@Html.Hidden("minTemp", Model.Min(i=>i.ForecastLowest))
<script type="text/javascript">
    $(document).ready(function () {
        var forecastAverageData = $.parseJSON($("input[name=forecastAverage]").val());

        var forecastAverage = [];
        for (var i = 0; i < forecastAverageData.length; i++) {
            forecastAverage.push([(new Date(forecastAverageData[i].time).getTime()), forecastAverageData[i].temperature, forecastAverageData[i].weathertype]);
        }

        var forecastHighestData = $.parseJSON($("input[name=forecastHighest]").val());
        var forecastHighest = [];
        for (var i = 0; i < forecastHighestData.length; i++) {
            forecastHighest.push([(new Date(forecastHighestData[i].time).getTime()), forecastHighestData[i].temperature]);
        }
        var forecastLowestData = $.parseJSON($("input[name=forecastLowest]").val());
        var forecastLowest = [];
        for (var i = 0; i < forecastLowestData.length; i++) {
            forecastLowest.push([(new Date(forecastLowestData[i].time).getTime()), forecastLowestData[i].temperature]);
        }
        var actualAverageData = $.parseJSON($("input[name=actualAverage]").val());
        var actualAverage = [];
        for (var i = 0; i < actualAverageData.length; i++) {
            actualAverage.push([(new Date(actualAverageData[i].time).getTime()), actualAverageData[i].temperature]);
        }
        var heatTempChartGrid = {
            tickColor: "#eee",
			backgroundColor:{colors:["#fef8eb","#ecf4fa"]},
            borderWidth: 0,
            hoverable: true,
            clickable: true
        };


        var maxTemp = parseFloat( $("#maxTemp").val() )+ 2;
        var minTemp = parseFloat($("#minTemp").val()) - 2;

        var tempChartOptions = {
            xaxis: {
                mode: "time",
                minTickSize: [1, "day"],
                timeformat: "%m月%d日"
            },
            yaxis: { max: maxTemp, min: minTemp },
            grid: heatTempChartGrid,
            colors: ["#ec6313", "#fabb3d", "#00558e", "#378fc9"],
            legend: {
                container: $("#graph-legend"),
                show: true,
                noColumns: 4
            }
        };

        var temperatureChartData = [];
        temperatureChartData.push({
            label: "预报平均温度",
            data: forecastAverage,
            lines: { show: true },
            points: { show: true }
        });
        temperatureChartData.push({
            label: "预报最高温度",
            data: forecastHighest,
            lines: { show: true },
            points: { show: true }
        });
        temperatureChartData.push({
            label: "预报最低温度",
            data: forecastLowest,
            lines: { show: true },
            points: { show: true }
        });
        temperatureChartData.push({
            label: "实际平均温度",
            data: actualAverage,
            lines: { show: true },
            points: { show: true, fill: true }
        });
		var now = forecastHighest[0][0] - 1000*60*60*24;
        temperatureChartData.push({
            data: [[now, 30], [now, -25]],
            lines: { show: true },
            points: { show: false },
            color: "#444"
        });
        var dashboardHeatTempChart = $.plot($("#graph"), temperatureChartData, tempChartOptions);

        var points = dashboardHeatTempChart.getData();

        var graphx = $('#graph').offset().left;
        graphx = graphx + 30; // replace with offset of canvas on graph
        var graphy = $('#graph').offset().top;
        graphy = graphy + 10; // how low you want the label to hang underneath the point
        var weatherIcon = "";
        for (var k = 0; k < points.length; k++) {
            for (var m = 0; m < points[k].data.length; m++) {
                if (points[k].data[m][0] != null && points[k].data[m][1] != null) {
                    if (k == 0 && m > 6) {
						//forecast tempreture line
						weatherIcon = '<div class="weathericon weather-' +points[k].data[m][2]  + '"></div>';
                        showInfoWindow(graphx + points[k].xaxis.p2c(points[k].data[m][0]) - 25, graphy + points[k].yaxis.p2c(points[k].data[m][1]) -30, weatherIcon + points[k].data[m][1], "#ec6313")
                    } else {
                        //showInfoWindow(graphx + points[k].xaxis.p2c(points[k].data[m][0]), graphy + points[k].yaxis.p2c(points[k].data[m][1]) + 5, points[k].data[m][1], "#00558e")
                    }
                }
            }
        }

    });
	$("<div id='tooltip'></div>").appendTo("body");

   $("#graph").bind("plothover", function (event, pos, item) {
            if (item) {
                var x = item.datapoint[0];
                $("#tooltip").html(item.series.label + " : " + item.datapoint[1])
				.css({ top: item.pageY + 5, left: item.pageX + 5 })
				.fadeIn(200);
            } else {
                $("#tooltip").hide();
            }
	});
    function showInfoWindow(x, y, contents, colour) {
        $('<div id="value">' + contents + " ℃" + '</div>').css({
            position: 'absolute',
            top: y,
            left: x,
			'width':'50px',
			'text-align':'center',
            'border-style': 'solid',
            'border-width': '2px',
            'border-color': "#FFF",
            'border-radius': '5px',
            'background-color': colour,
            color: '#FFF',
            padding: '2px'
        }).appendTo("body");
    } 
    
</script>