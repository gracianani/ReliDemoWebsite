@model ReliDemo.ViewModels.StationHistoriesViewModel

@{
    ViewBag.Title = "Graph";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row-fluid">
<div class="span8">
<p>
    @Html.ActionLink("返回热力站列表", "Paged")
</p>
</div>
</div>
<div class="row-fluid clearfix stationTitle">
    <h1 class="span3">@Model.StationName</h1>
    <div onDesktop="span4" onTablet="span6" onMobile="span12">@Html.Partial("_TopMenu")</div>
</div>

<div class="row-fluid stationControl form-inline">
    <div class="control-group"  onTablet="span12" onDesktop="span8" >
        <label class="radio inline">
            <input type="radio" value="week" @if(Model.SearchSpan == "week"){<text>checked</text>}  name="searchSpan" /> 周
        </label>
        <label class="radio inline">
            <input type="radio" value="month" @if(Model.SearchSpan == "month"){<text>checked</text>}  name="searchSpan"  /> 月
        </label>
        <label class="radio inline">
            <input type="radio" value="season" @if(Model.SearchSpan == "season"){<text>checked</text>}  name="searchSpan"  /> 供暖季
        </label>
        <label class="radio inline"> 
            <div class="input-prepend date" >
                <label class="radio"> <input type="radio" id="customAll" name="searchSpan" value="customAll"  @if(Model.SearchSpan == "customAll" ){<text>checked</text>} /> 自选日期  </label>
			    <span class="add-on"><i class="icon-calendar"></i></span>
                <input type="text" class="form-control input-xlarge" id="daterange" name="daterange" value="@if(Model.SearchSpan == "customAll" ){ <text>@Model.FromDate.Value.ToShortDateString() - @Model.ToDate.Value.ToShortDateString()</text> }"  >
			</div>
        </label>
        <input type="submit" value="搜索" id="search" class="btn btn-primary" style="vertical-align: bottom;"/>
    </div>
</div>
<div class="box">
<div class="box-content" style="position:relative">
    <div id="stationgraph" style="width:100%;height:400px;margin-top:20px;">
    </div>
	<div class="axisLabel" style="position:absolute;top:5px;right:10px">(℃)</div>
	<div class="axisLabel" style="position:absolute;top:5px;left:2px;font-size:10px;font-family:Arial">(kcal/h•㎡)</div>
	<div class="axisLabel" style="position:absolute;top:5px;left:65px;font-size:10px;font-family:Arial">(GJ)</div>
</div>
</div>
@Html.HiddenFor(model=>model.StationId)
@Html.HiddenFor(model=>model.FromDate)
@Html.HiddenFor(model=>model.ToDate)
@Html.Hidden("plan", @Model.计算热指标)
@Html.Hidden("actual", @Model.计划热指标)
@Html.Hidden("calculated", @Model.实际运行热指标)
@Html.Hidden("plan_GJ", @Model.计划供热量GJ)
@Html.Hidden("calculated_GJ", @Model.核算供热量GJ)
@Html.Hidden("actual_GJ", @Model.实际供热量GJ)
@Html.Hidden("temperatureForecast", @Model.预报温度)
@Html.Hidden("temperatureActual", @Model.实际温度)
@Html.Hidden("fromDate", @Model.FromDate.Value.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds)
@Html.Hidden("toDate", @Model.ToDate.Value.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds)
<script type="text/javascript">

    $(function () {
        var plan_index = $.parseJSON($("input[name=plan]").val());
        var calculated_index = $.parseJSON($("input[name=calculated]").val());
        var actual_index = $.parseJSON($("input[name=actual]").val());
        var plan_gj = $.parseJSON($("input[name=plan_GJ]").val());
        var calculated_gj = $.parseJSON($("input[name=calculated_GJ]").val());
        var actual_gj = $.parseJSON($("input[name=actual_GJ]").val());
        var today = new Date();
        var tempPlan = $.parseJSON($("input[name=temperatureForecast]").val());
        var tempActu = $.parseJSON($("input[name=temperatureActual]").val());

        var heatoptions = {
            lines: {
                show: true
            },
            points: {
                show: true
            },
			colors: ["#378fc9", "#00558e","#fabb3d", "#ec6313", "#9e3f3d","#33CCCC","#7fb30c","#339966"],
            xaxis: {
                mode: "time",
                minTickSize: [1, "day"],
                timeformat: "%m月%d日",
                min: parseInt($("#fromDate").val()),
                max: parseInt($("#toDate").val())
            },
            yaxes: [ {
            position: "left"
        },{position: "right"},{
            position: "left"
        }],
            legend: { position: "se" },
            grid: {
                tickColor: "#eee",
                borderWidth: 0,
                hoverable: true,
                clickable: true,
				backgroundColor:{colors:["#fef8eb","#ecf4fa"]},
            }
        };

        $.plot("#stationgraph", 
		[{ "label":"实际平均温度", "data": tempActu, yaxis: 2 }, 
		{ "label": "预报平均温度", "data": tempPlan, yaxis: 2 }, 
		{ "label": "实际运行热指标", "data": actual_index, yaxis: 1 }, 
		{ "label": "计划热指标", "data": plan_index, yaxis: 1 }, 
		{ "label": "核算热指标", "data": calculated_index, yaxis: 1 }, 
		{ "label": "实际供热量", "data": actual_gj, yaxis: 3 }, 
		{ "label": "计划供热量", "data": plan_gj, yaxis: 3 }, 
		{ "label": "核算供热量", "data": calculated_gj, yaxis: 3}], heatoptions);

        $("#search").click(function () {

            var button = $(this);

            // Find the URL in the link right next to us, then fetch the data
            var searchSpan = $("label :has(span.checked) input").val();

            var dataurl = "HistoryData?stationId=" + $("#StationId").val() + "&searchSpan=" + searchSpan + "&daterange=" + $("#daterange").val();

            function onDataReceived(series) {
                console.log(series);
                heatoptions.xaxis.min = series.fromDate;
                heatoptions.xaxis.max = series.toDate;
                $.plot("#stationgraph", [{ "label": "实际平均温度", "data": $.parseJSON(series.tempActual), yaxis: 2 },
                { "label": "预报平均温度", "data": $.parseJSON(series.tempForecast), yaxis: 2 },
                { "label": "实际运行热指标", "data": $.parseJSON(series.actual), yaxis: 1 },
                { "label": "计划热指标", "data": $.parseJSON(series.planned), yaxis: 1 },
                { "label": "计算热指标", "data": $.parseJSON(series.calculated), yaxis: 1 },
                { "label": "实际GJ", "data": $.parseJSON(series.actual_gj), yaxis: 3 },
                { "label": "计划GJ", "data": $.parseJSON(series.planned_gj), yaxis: 3 },
                { "label": "核算GJ", "data": $.parseJSON(series.calculated_gj), yaxis: 3}], heatoptions);
            }

            $.ajax({
                url: dataurl,
                type: "GET",
                dataType: "json",
                success: onDataReceived
            });
        });

        $("#daterange").daterangepicker({
            format: 'YYYY年MM月DD日',
            locale: {
                applyLabel: '确定',
                cancelLabel: '取消',
                fromLabel: '从',
                toLabel: '到',
                weekLabel: 'W',
                customRangeLabel: '自定义日期',
                daysOfWeek: moment()._lang._weekdaysMin.slice(),
                monthNames: moment()._lang._monthsShort.slice(),
                firstDay: 0
            }
        },
        function (start, end) {
            $("#customAll").attr("checked", "checked").parent().addClass("checked");
        });

        function showTooltip(x, y, contents) {
            
            $("<div id='tooltip'>" + contents + "</div>").css({
                top: y + 5,
                left: x + 5
            }).appendTo("body").fadeIn(200);
        }
        var previousPoint = null;
        $("#stationgraph").bind("plothover", function (event, pos, item) {
            if (item) {
                if (previousPoint != item.dataIndex) {
                    previousPoint = item.dataIndex;
                    $('#tooltip').remove();
                    y = item.datapoint[1];
                    showTooltip(item.pageX, item.pageY, item.series.label + " : " + y);
                }
            } else {
                $("#tooltip").remove();
                previousPoint = null;
            }
        });



    });

	</script>